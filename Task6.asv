% 6.* Implement a program that plots a given R^2?R function as a 3D surface,
% and its second order approximations (Taylor-polynomials) at a given point,
% step-by-step in each step of Newton’s method (without line search and the
% positive definite correction, i.e. based on Newton_noLS.m).

% USAGE: PRESS ANY KEY TO STEP. WHEN STEPPING, TURN OFF THE DRAGGING MODE
% ELSE IT WILL FLASH

%% PARAMETERS =============================================================
% Sample Function
% sample4 - gradient descent, multivariable Newton, conjugate gradient;
% recommended region: [-2,2]x[-2,2]
f=@(x) x(1)^4+x(2)^4-4*x(1)^2;
df=@(x) [4*x(1)^3-8*x(1);4*x(2)^3];
ddf=@(x) [12*x(1)^2-8 0;0 12*x(2)^2];

% skeleton for taylor calculation
t2 = @(x0, x) f(x0) + df(x0)'*(x-x0) + (x-x0)'*ddf(x0)*(x-x0);

% Region and Resolution
startX = -2;
endX = 2;
startY = -2;
endY = 2;
res = 100;

% number of iterations to go upto
maxIter = 500;

%% SETTING UP STARTING STATE ==============================================

x = rand(2, 1);
x(1) = x(1) * (endX - startX) + startX;
x(2) = x(2) * (endY - startY) + startY;
X = linspace(startX, endX, res);
Y = linspace(startY, endY, res);
Z = zeros(res, res);
T = zero(re, res);

for i=1:res
    for j=1:res
        Z(j, i) = f([X(i); Y(j)]);
        T(j, i) = t2(
    end
end

% starting plot
surf(X,Y,Z, 'EdgeColor', 'none');
hold on
hPoint = scatter3(x(1), x(2), f(x), 'r','filled');
hTaylor = 

%% MAIN LOOP ==============================================================
for iterIndex = 1 : maxIter
    x = Newton_noLS(f, df, ddf, x, 1);
    plotState(x, val)
end

%% Functions
function plotState(x, val)
    global h
    delete(h)
    
    w = 0;
    while w < 1
        w = waitforbuttonpress;
    end
end

function [ x ] = Newton_noLS(~,df,ddf,x0,iter)
    % f: vector->scalar objective function; not used!
    % df: gradient function
    % ddf: Hessian
    % x0: starting point
    % iter: number of iterations
    x = x0;
    for k = 1: iter
        p = -inv(ddf(x)) * df(x);
        x = x + 0.25 * p;
    end
end
